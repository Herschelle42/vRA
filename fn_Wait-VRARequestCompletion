function Wait-VRARequestCompletion {
<#
.SYNOPSIS
  Wait for VRA Request to have a completion status and report this status.
.DESCRIPTION
  Waits for and returns the completion status of the VRA request number(s). This allows us to wait for the VRA Request to complete before continuing with the script.
.INPUTS
  System.String[]
  System.Int
.OUTPUTS
  System.Management.Automation.PSObject
.PARAMETER RequestNumber
  The VRA Request Number or numbers to wait for
.PARAMETER SleepSeconds
  The number of seconds to wait between polling of VRA status. Default is 300 seconds (5 minutes).
.EXAMPLE
  Wait-VRARequestCompletion -RequestNumber 676001,672383,672332

  RequestNumber CompletionStatus
  ------------- ----------------
  676001        SUCCESSFUL      
  672383        SUCCESSFUL      
  672332        SUCCESSFUL
.EXAMPLE
  676001..676003 | Wait-VRARequestCompletion

  RequestNumber CompletionStatus
  ------------- ----------------
  676001        SUCCESSFUL
  676002        FAILED
  676003        FAILED

.NOTES
  Enhancement: foeach each Request number, initiate each item as a Job
    and monitoring. At the moment this function waits for the first one
    to complete, before checking the next one.

#>
[CmdletBinding()][OutputType('System.Management.Automation.PSObject')]

    Param (
      [Parameter(Mandatory=$true,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]
      [Int32[]]$RequestNumber,
      [Parameter(Mandatory=$false)]
      [int32]$SleepSeconds=30
    )#end Param

    Begin {
        Write-Verbose -Message "[INFO] Start Wait-VRARequestCompletion"
        Write-Verbose -Message "[INFO] SleepSeconds: $($SleepSeconds)"

        Write-Verbose -Message "[INFO] Check if there is a connection to vRA"
        if ($vRAConnection) {
            Write-Verbose -Message "[INFO] Connected to: $($vRAConnection.Server)"
        } else {
          throw "[ERROR] !!! No vRA Server Connection. `$vRAConnection variable not found or is null."
        }#end if vRAConnection
    }#end Begin block

    Process {

        Write-Verbose -Message "[INFO] Processing Request Number: $($RequestNumber)"

        $result = Get-vRARequest -RequestNumber $RequestNumber

        If ($result.state -ne "SUCCESSFUL" ){
            Write-Verbose -Message "[INFO] Current Status : $($result.state)"

            $loopNumber=1

            do
            {
                #Show progress to user (if using verbose)
                Write-Verbose "[INFO] Sleep $($loopNumber)"
                $loopNumber++
	            Start-Sleep -Seconds $SleepSeconds 

                $result = Get-vRARequest -RequestNumber $RequestNumber
                Write-Verbose -Message "[INFO] Current Status : $($result.state)"
  
            } while ($result.state -eq "IN_PROGRESS" -or $result.state -eq "SUBMITTED" -or $result.state -eq "PROVIDER_COMPLETED" -or $result.state -eq "POST_APPROVED" -or $result.state -eq "PRE_APPROVED" -or $result.state -eq "PENDING_PRE_APPROVAL")

        }#end if

        $hash = [ordered]@{}
        $hash.RequestNumber = $RequestNumber
        $hash.CompletionStatus = $result.State
        $object = new-object PSObject -property $hash
        $object


    }#end Process block

    End {
        Write-Verbose -Message "[INFO] End Wait-VRARequestCompletion"
    }#end End block

}#End function Wait-VRARequestCompletion
