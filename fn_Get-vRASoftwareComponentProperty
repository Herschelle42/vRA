function Get-vRASoftwareComponentProperty
{
<#
.SYNOPSIS
   Get vRA Software Component property name and values
.DESCRIPTION
   Gets all the Property Names and Values from Software Components.
.PARAMETER Property
    The name of the Property, or part of the name of the Property to search for
.PARAMETER Exact
    Switch indicating whether the Property is an exact match (-eq). Default is 
    false (-match).
.EXAMPLE
   PS> Get-vRASoftwareComponentProperty -Property "vro_work"

    SoftwareComponentName       SoftwareComponentId                 Name             Description                   Type   Value                                Encrypted Overrideable Required Computed
    ---------------------       -------------------                 ----             -----------                   ----   -----                                --------- ------------ -------- --------
    Account_Secrets_LNX         Software.Account_Secrets_LNX        vro_workflowId   ID of the workflow to run     STRING 1511572d-7d9d-4b50-a9c5-0db8fa8ec121     False        False    False    False
    AD_Service_Account_LNX      Software.AD_Service_Account_LNX     vro_workflowName Name of the workflow to run   STRING dept_AD_Service_Account                  False        False     True    False

    Finds all Software Component Properties with "vro_work" in the name

.EXAMPLE
   PS> $workflowList = Get-vRASoftwareComponentProperty -Property "vro_work" | Sort Value | Select Value -Unique

   Value                               
   -----
   025897e6-919a-4b55-96d6-9cefdbcc3d1c
   b1a859ab-c989-40b0-95c4-ee9589c3ce40
   bc66eae3-1787-47f3-900e-9fd1489d0af4
   dept_Account_Secrets                
   dept_AD_Service_Account             
   dept_FMW_Install                    
   dept_vCenter_Create_DRS_Rules       
   f40948e9-0356-4735-9a77-9e73631fa876

   Finds and reports the unique values for Software Component Properties that match "vro_name"

.NOTES
   Author: Clint Fritz
   Created On: vRA 7.5
   Enhancement Ideas:
     Add Param to search for just one Software Component by Name or Id
     Property name search to be either pattern or exact (eq vs match vs like)
     Add Param for regex search of Values? -Value (string) -Regex (switch)
#>
#requires -Modules PowervRA
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$false,
                   ValueFromPipelineByPropertyName=$true,
                   Position=0)]
        [AllowEmptyString()]
        [string]$Property,

        [Parameter(Mandatory=$false)]
        [Switch]$Exact=$false

    )#end Param

    Begin
    {
        # --- Test for existing connection to vRA
        if (-not $Global:vRAConnection){

            throw "vRA Connection variable does not exist. Please run Connect-vRAServer first to create it"
        }

        $Headers = @{
            "Accept"="application/json";
            "Content-Type" = "application/json";
            "Authorization" = "Bearer $($Global:vRAConnection.Token)";
        }
        $method = "GET"

        $uri = "$($Global:vRAConnection.Server)/software-service/api/softwarecomponenttypes?page=1&limit=100"
        Write-Verbose "[INFO] uri: $($uri)"

        $response = Invoke-RestMethod -Uri $uri -Method $method -Headers $headers -UseBasicParsing
        $softwareComponentList = $response.content | sort name

    }#end begin block

    Process
    {
        foreach ($softwareComponent in $softwareComponentList | sort Name)
        {
            Write-Verbose "[INFO] $($softwareComponent.Name)"
            $uri = "$($Global:vRAConnection.Server)/software-service/api/softwarecomponenttypes/$($softwareComponent.id)"
            $scObject = Invoke-RestMethod -Uri $uri -Method $method -Headers $headers -UseBasicParsing

            #Exclude ref fields as they appear to be vRA internal properties
            foreach ($field in $scObject.schema.fields | ? { $_.dataType.type -ne "ref" })
            {
                Write-Verbose "[INFO] Field Label: $($field.label)"

                #will collect all if _no_ Property is specified
                if($field.label -match $Property)
                {

                    $hash = [ordered]@{}
                    $hash.SoftwareComponentName = $scObject.name
                    $hash.SoftwareComponentId = $scObject.id
                    $hash.Name = $field.label
                    $hash.Description = $field.description
                    $hash.Type = $field.dataType.typeId

                    $hash.Value = ($field.state.facets | ? { $_.type -match "derivedValue|defaultValue"}).value.value.value

                    #Determine if Property is encrypted or not
                    if ($field.dataType.typeId -eq "SECURE_STRING")
                    {
                        $hash.Encrypted = $true
                    } else {
                        $hash.Encrypted = $false
                    }#end if Encrypted

                    #if defaultValue then Property is overridable, if derivedValue it is not.
                    if ($field.state.facets | ? { $_.type -eq "defaultValue"})
                    {
                        $hash.Overrideable = $true
                    } else {
                        $hash.Overrideable = $false
                    }#end if defaultValue

                    #Required (Mandatory) T/F
                    if (($field.state.facets | ? { $_.type -eq "mandatory"}).value.value.value)
                    {
                        $hash.Required = $true
                    } else {
                        $hash.Required = $false
                    }#end if Required

                    #Computed T/F
                    if ($field.state.facets | ? { $_.type -eq "editable"})
                    {
                        $hash.Computed = $true
                    } else {
                        $hash.Computed = $false
                    }#end if Computed

                    $object = New-Object PSObject -Property $hash
                    $object

                }#end if matching Property name

            }#end foreach Field

        }#end foreach SoftwareComponent

    }#end Process block

    End
    { 
    }#end End block

}#end Function
